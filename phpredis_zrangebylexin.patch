diff --git a/php_redis.h b/php_redis.h
index b52fcee..da8d203 100644
--- a/php_redis.h
+++ b/php_redis.h
@@ -116,6 +116,7 @@ PHP_METHOD(Redis, zRevRange);
 PHP_METHOD(Redis, zRangeByScore);
 PHP_METHOD(Redis, zRangeByLex);
 PHP_METHOD(Redis, zRevRangeByScore);
+PHP_METHOD(Redis, zRangeByLexIn);
 PHP_METHOD(Redis, zRangeByLex);
 PHP_METHOD(Redis, zRevRangeByLex);
 PHP_METHOD(Redis, zRemRangeByLex);
diff --git a/redis.c b/redis.c
index b0893ce..520494f 100644
--- a/redis.c
+++ b/redis.c
@@ -202,6 +202,7 @@ static zend_function_entry redis_functions[] = {
      PHP_ME(Redis, zRevRange, NULL, ZEND_ACC_PUBLIC)
      PHP_ME(Redis, zRangeByScore, NULL, ZEND_ACC_PUBLIC)
      PHP_ME(Redis, zRevRangeByScore, NULL, ZEND_ACC_PUBLIC)
+     PHP_ME(Redis, zRangeByLexIn, NULL, ZEND_ACC_PUBLIC)
      PHP_ME(Redis, zRangeByLex, NULL, ZEND_ACC_PUBLIC)
      PHP_ME(Redis, zRevRangeByLex, NULL, ZEND_ACC_PUBLIC)
      PHP_ME(Redis, zLexCount, NULL, ZEND_ACC_PUBLIC)
@@ -2053,6 +2054,12 @@ PHP_METHOD(Redis, zRevRangeByScore) {
 }
 /* }}} */
 
+PHP_METHOD(Redis, zRangeByLexIn) {
+    REDIS_PROCESS_KW_CMD("ZRANGEBYLEXIN", redis_zrangebylexin_cmd,
+        redis_sock_read_multibulk_reply);
+}
+/* }}} */
+
 /* {{{ proto array Redis::zRangeByLex(string key, string min, string max, [
  *                                    offset, limit]) */
 PHP_METHOD(Redis, zRangeByLex) {
diff --git a/redis_commands.c b/redis_commands.c
old mode 100644
new mode 100755
index 0de5b77..e8d370c
--- a/redis_commands.c
+++ b/redis_commands.c
@@ -851,6 +851,133 @@ int redis_unsubscribe_cmd(INTERNAL_FUNCTION_PARAMETERS, RedisSock *redis_sock,
     return SUCCESS;
 }
 
+static int x_zval_compare(zval **a, zval **b TSRMLS_DC) /* {{{ */
+{
+    zval result;
+    zval *first;
+    zval *second;
+
+    first = *((zval **) a);
+    second = *((zval **) b);
+
+    if (string_compare_function(&result, first, second TSRMLS_CC) == FAILURE) {
+        return 0;
+    }
+
+    if (Z_TYPE(result) == IS_DOUBLE) {
+        if (Z_DVAL(result) < 0) {
+            return -1;
+        } else if (Z_DVAL(result) > 0) {
+            return 1;
+        } else {
+            return 0;
+        }
+    }
+
+    convert_to_long(&result);
+
+    if (Z_LVAL(result) < 0) {
+        return -1;
+    } else if (Z_LVAL(result) > 0) {
+        return 1;
+    }
+
+    return 0;
+}
+/* }}} */
+
+//static int php_hello_array_walk_args(zval **element, int num_args, var_list args, zend_hash_key *hash_key)
+static int walk_lexin_args(zval **element TSRMLS_DC, int num_args, va_list args, zend_hash_key *hash_key) {
+// static int walk_lexin_args(zval **element, RedisSock *redis_sock, smart_str* pcmdstr, char** pval, int* pval_len TSRMLS_DC) {
+    RedisSock* redis_sock = va_arg(args, RedisSock*);
+	smart_str* pcmdstr = va_arg(args, smart_str*);
+	char** pval = va_arg(args, char**);
+	int *pval_len = va_arg(args, int*);
+	//TSRMLS_FETCH();
+
+    int val_free = redis_serialize(redis_sock, *element, pval, pval_len TSRMLS_CC);
+
+    redis_cmd_append_sstr(pcmdstr, *pval, *pval_len);
+
+         // Free value if we serialized
+    if(val_free) STR_FREE(*pval);
+
+    return ZEND_HASH_APPLY_KEEP;
+}
+
+// ZRANGEBYLEXIN key reverse_order_mode min_lexical_value max_lexical_value offset limit asc_prefix1 [ asc_prefix2 [ ... asc_prefixN ] ]
+int redis_zrangebylexin_cmd(INTERNAL_FUNCTION_PARAMETERS, RedisSock *redis_sock,
+                          char *kw, char **cmd, int *cmd_len, short *slot,
+                          void **ctx)
+{
+    zval **z_args;
+    char *key, *val;
+    int key_len, key_free, val_len, val_free;
+    int argc = ZEND_NUM_ARGS(), i;
+    smart_str cmdstr = {0};
+
+    if(argc < 7) {
+        php_error_docref(0 TSRMLS_CC, E_WARNING,
+            "Must pass at least 7 arguments");
+        return FAILURE;
+    }
+
+    z_args = emalloc(argc * sizeof(zval*));
+    if(zend_get_parameters_array(ht, argc, z_args)==FAILURE) {
+        efree(z_args);
+        return FAILURE;
+    }
+
+    // Prefix our key
+    key = Z_STRVAL_P(z_args[0]);
+    key_len = Z_STRLEN_P(z_args[0]);
+    key_free = redis_key_prefix(redis_sock, &key, &key_len);
+
+    // Start command construction
+    redis_cmd_init_sstr(&cmdstr, argc, "ZRANGEBYLEXIN", sizeof("ZRANGEBYLEXIN")-1);
+    redis_cmd_append_sstr(&cmdstr, key, key_len);
+
+    // Set our slot, free key if we prefixed it
+    CMD_SET_SLOT(slot,key,key_len);
+    if(key_free) efree(key);
+
+    for(i=1;i < 6;++i) {
+        val_free = redis_serialize(redis_sock, z_args[i], &val, &val_len TSRMLS_CC);
+        redis_cmd_append_sstr(&cmdstr, val, val_len);
+
+        // Free value if we serialized
+        if(val_free) STR_FREE(val);
+    }
+
+    if(Z_TYPE_P(z_args[6]) == IS_ARRAY) {
+       zend_hash_apply_with_arguments(Z_ARRVAL_P(z_args[6]), (apply_func_arg_t)walk_lexin_args, 4, redis_sock, &cmdstr, &val, &val_len /* TSRMLS_CC*/ );
+    } else {
+        if(argc > 7) {
+            zend_qsort(z_args + 6, argc - 6, sizeof(zval*), (compare_func_t) x_zval_compare TSRMLS_CC);
+        }
+
+        // Now the rest of our arguments
+        for(i=6;i<argc;++i) {
+            val_free = redis_serialize(redis_sock, z_args[i], &val, &val_len
+                TSRMLS_CC);
+    
+            redis_cmd_append_sstr(&cmdstr, val, val_len);
+    
+            // Free value if we serialized
+            if(val_free) STR_FREE(val);
+        }
+    }
+
+    // Push output values
+    *cmd_len = cmdstr.len;
+    *cmd     = cmdstr.c;
+
+    // Cleanup args
+    efree(z_args);
+
+    return SUCCESS;
+}
+
 /* ZRANGEBYLEX/ZREVRANGEBYLEX */
 int redis_zrangebylex_cmd(INTERNAL_FUNCTION_PARAMETERS, RedisSock *redis_sock,
                           char *kw, char **cmd, int *cmd_len, short *slot,
